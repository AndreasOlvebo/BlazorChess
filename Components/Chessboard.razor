@using Models
@using Models.PieceTypes
@using Extensions
@using Debugging

@inject IRefreshService RefreshService

<div class="board-border unselectable">
    <div class="container board-inner-border">
        @for (int i = Board.BoardMax.Y; i >= 0; i--)
        {
        <div class="row">
            @for (int j = 0; j <= Board.BoardMax.X; j++)
            {
                Tile tile = Board.Tiles[j, i];
                <div class="tile @Color(tile.Color) @(tile.Selected ? "selected" : "") " @onclick="() => ClickTile(tile)" tabindex="0" @onkeypress="args => PressKey(args, tile)">
                    @((char)(65 + tile.TilePosition.X))@(tile.TilePosition.Y + 1)<br />
                    <ChessPiece Piece="tile.ChessPiece" />
                </div>
            }
        </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Board Board { get; set; }
    [Parameter]
    public TurnHistory TurnHistory { get; set; }

    protected override async Task OnInitializedAsync()
    {

        await Task.Run(() =>
        {
            TurnHistory = new TurnHistory();
        });
    }

    private void PressKey(KeyboardEventArgs args, Tile hoveredTile)
    {
        if (args.Key == "t" && hoveredTile.ChessPiece is not null)
        {
            hoveredTile.ChessPiece.Tracked = !hoveredTile.ChessPiece.Tracked;
        }
        if (args.Key == "d" && hoveredTile.ChessPiece is not null)
        {
            hoveredTile.ChessPiece.Defeated = true;
            Board.DefeatedPieces.Add(hoveredTile.ChessPiece);
            hoveredTile.ChessPiece = null;
        }
    }

    private async void ClickTile(Tile clickedTile)
    {
        (ClickResult clickResult, Turn turnResult) = Board.TileClicked(clickedTile, TurnHistory);
        Console.WriteLine($"clickResult: {clickResult}, newTurn: {turnResult}");
        if(clickResult == ClickResult.Select)
        {
            //Board = turnResult.BoardState;
            await RefreshService.CallRefreshBoard(Board);
        }
        else if (clickResult == ClickResult.Confirm)
        {
            Board = TurnHistory.AddTurnAndReturnBoardState(turnResult);

            await RefreshService.CallRequestRefresh();
            await RefreshService.CallRefreshBoard(Board);
        }
        else
        {
            Board = turnResult.BoardState;
            //TODO: Right now being placed in check will not deselect tile. Or maybe it won't select the tile to move to in the first place.
            //Also, when ClickResult is Select a new Board is created every time which may seem excessive.
        }
        //PieceColor currentPlayer = Board.CurrentPlayer;
        //PieceColor opponent = currentPlayer.NextColor();
        //SpecialMove specialMove = SpecialMove.No;
        //Check currentPlayerInCheck = Board.IsInCheck(currentPlayer);
        //Board.TileClicked(clickedTile);
        //if (PreviousTile is not null)
        //{
        //    TaggedWriter.WriteLine($"PreviousTile is not null", PreviousTile.ChessPiece, clickedTile.TilePosition);
        //    if (PreviousTile == clickedTile)
        //    {
        //        DeselectTile(PreviousTile);
        //    }
        //    else if (PreviousTile.Occupied && IsPlayersTurn(PreviousTile.ChessPiece.PieceColor))
        //    {
        //        bool processMove = false;
        //        Piece potentiallyDefeatedPiece = clickedTile.ChessPiece ?? null;

        //        if (PreviousTile is not null && IsSpecialMove(clickedTile, out specialMove))
        //        {
        //            processMove = true;
        //        }
        //        else
        //        {
        //            TaggedWriter.WriteLine($"About to check if move is allowed for {PreviousTile.ChessPiece.Name} at {PreviousTile.TilePosition} to {clickedTile.TilePosition}", PreviousTile.ChessPiece, clickedTile.TilePosition);
        //            MoveAllowed allowMove = PreviousTile.ChessPiece.IsMoveAllowed(Board.BoardMax, PreviousTile.TilePosition, clickedTile.TilePosition);
        //            switch (allowMove)
        //            {
        //                case MoveAllowed.No:
        //                    break;
        //                case MoveAllowed.Yes:
        //                    if (!clickedTile.Occupied || PreviousTile.ChessPiece.PieceColor != clickedTile.ChessPiece.PieceColor)
        //                    {
        //                        processMove = true;
        //                    }
        //                    break;
        //                case MoveAllowed.IfEmpty:
        //                    if (!clickedTile.Occupied)
        //                    {
        //                        processMove = true;
        //                    }
        //                    break;
        //                case MoveAllowed.IfAttack:
        //                    if (clickedTile.Occupied && PreviousTile.ChessPiece.PieceColor != clickedTile.ChessPiece.PieceColor)
        //                    {
        //                        processMove = true;
        //                    }
        //                    break;
        //                default:
        //                    break;
        //            }
        //        }
        //        if (processMove)
        //        {
        //            TaggedWriter.WriteLine($"ProcessMove: {processMove}, SpecialMove: {specialMove}", PreviousTile.ChessPiece, clickedTile.TilePosition);
        //            if (specialMove != SpecialMove.No)
        //            {
        //                TaggedWriter.WriteLine($"SpecialMove: {specialMove}", PreviousTile.ChessPiece, clickedTile.TilePosition);
        //                MakeSpecialMove(clickedTile, specialMove);
        //            }
        //            else
        //            {
        //                TaggedWriter.WriteLine($"MoveChessPiece", PreviousTile.ChessPiece, clickedTile.TilePosition);
        //                MoveChessPiece(clickedTile);
        //            }
        //        }
        //        else
        //        {
        //            DeselectTile(PreviousTile);
        //            SelectTile(clickedTile);
        //        }
        //        if (Board.IsInCheck(currentPlayer) != Check.No)
        //        {
        //            Console.WriteLine("----------------------------------");
        //            Console.WriteLine("----------------------------------");
        //            Console.WriteLine("----------------------------------");
        //            Console.WriteLine("-------------IN CHECK-------------");
        //            Console.WriteLine("----------------------------------");
        //            Console.WriteLine("----------------------------------");
        //            Console.WriteLine("----------------------------------");
        //            Console.WriteLine($"Board Id: {Board.BoardId}");
        //            Board = TurnHistory.LastTurn()?.BoardState ?? Board;
        //            Console.WriteLine($"Board Id after: {Board.BoardId}");

        //            Board.CurrentPlayer = currentPlayer;
        //        }
        //        else
        //        {
        //            if (processMove)
        //            {
        //                TaggedWriter.WriteLine($"board: {Board}, clicked.chesspiece: {clickedTile.ChessPiece}, previoustile.pos: {PreviousTile.TilePosition}, clicked.pos: {clickedTile.TilePosition}, potential: {potentiallyDefeatedPiece}", PreviousTile.ChessPiece);
        //                PawnToQueen(Board);
        //                Board = TurnHistory.AddTurn(Board, clickedTile.ChessPiece, PreviousTile.TilePosition, clickedTile.TilePosition, potentiallyDefeatedPiece);
        //                NextPlayer();
        //                DeselectTile(PreviousTile);
        //            }
        //        }

        //        await RefreshService.CallRequestRefresh();
        //        await RefreshService.CallRefreshBoard(Board);
        //    }
        //    else
        //    {
        //        SelectTile(clickedTile);
        //    }
        //}
        //else
        //{
        //    SelectTile(clickedTile);
        //}
    }

    private string Color(TileColor tileColor)
    {
        return tileColor == TileColor.White ? "white-tile" : "black-tile";
    }
}
